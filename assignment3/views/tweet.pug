.col-3of5.bg-white
  if (user)
    .tweet
      form(action="/tweets" method="POST")
        .row
          img.avatar-sm.v-top(src=user.avatarUrl alt="avatar")
          textarea.input-tweet(placeholder="What's up?" name="content")
        .row.tweet-actions
          input.hidden(name="imageUrl")
          button.btn-clear
            i.far.fa-image
          button.btn-primary Post
  each tweet in tweets
    .tweet
      .row
        img.avatar-sm(src=tweet.author.avatarUrl alt="avatar")
        h4
          b=tweet.author.name
        h5=`@${tweet.author.username}`
        h5=moment(tweet.createdAt).format('MMMM D, YYYY hh:mm A')
        if (user && (tweet.author.username === user.username))
            button.edit(data-username=tweet.author.username) Edit
            button.btn-delete(data-_id=tweet._id) Delete
      p=tweet.content
        if (tweet.imageUrl && typeof tweet.imageUrl !== 'string')
          if (tweet.imageUrl.length > 0)
            each url in tweet.imageUrl
                img(src=url alt="tweet")
        else 
            img(src=tweet.imageUrl alt="tweet")
      if (user && (tweet.author.username === user.username))
            - var imgUrl = JSON.stringify(tweet.imageUrl ? tweet.imageUrl : [])
            - var content = tweet.content
            .edit-tweet-container(style="display: none;")
                - const _id = tweet._id
                include editTweet
style.
    .edit, .btn-delete {
        display: none;
        margin: 0 10px;
        background-color: #777;
        color: #fff;
        border: 1px solid #333;
        padding: 4px 10px;
        border-radius: 5px;
    }
    .tweet:hover .edit,.tweet:hover .btn-delete {
        display: inline-block;
    }
script(src="//static.filestackapi.com/filestack-js/3.x.x/filestack.min.js")
script.
    const urlInput = document.querySelector('input[name="imageUrl"]')
    const options = {
        maxFiles: 5,
        onUploadDone: file => {
            const urls = file.filesUploaded.map(item => item.url) || []
            urlInput.value = JSON.stringify(urls)
        }
    };
    
    document.querySelector('.btn-clear').addEventListener('click', e => {
        e.preventDefault()
        console.log(123)
        const apikey = 'AP2lqu4mSQwCZfEMEfPG6z';
        const client = filestack.init(apikey);

        client.picker(options).open();
    })
    
    const apikey = 'AP2lqu4mSQwCZfEMEfPG6z';
    const client = filestack.init(apikey);
    Array.from(document.querySelectorAll('.tweet')).forEach(edit => {
        edit.addEventListener('click', e => {
            if(e.target.innerText === 'Edit') {
                e.currentTarget.querySelector('.edit-tweet-container').style.display = e.currentTarget.querySelector('.edit-tweet-container').style.display === 'block' ? 'none' : 'block'
                if(e.currentTarget.querySelector('.edit-tweet-container').style.display === 'block') {
                    const urlInput = e.currentTarget.querySelector('input[name="imageUrl"]')
                    e.currentTarget.querySelector('.btn-update-image').addEventListener('click', event => {
                        const options = {
                            maxFiles: 5,
                            onUploadDone: file => {
                                const urls = file.filesUploaded.map(item => item.url) || []
                                urlInput.value = JSON.stringify(urls)
                            }
                        };
                        event.preventDefault()
                        client.picker(options).open();
                    })
                }
            } else if (e.target.innerText === 'Delete'){
                $.ajax({
                        url: '/tweets',
                        type: 'DELETE',
                        data: { _id: e.target.dataset._id },
                        success(res) {
                            if (res.success) location.href='/';
                        }
                });
            } else {
                return
            }
            
        })
    })